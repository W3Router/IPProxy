代码修改原则：
1. 如果现有的代码能正常工作，就不要过度优化或改动
2. 最简单的解决方案往往是最好的
3. 遵循"最小改动原则"，只修改必要的部分
4. 在进行优化之前，先确认是否真的需要优化
5. 保持代码的可读性和可维护性比过度优化更重要
6. 不要为了使用新技术而改变已经稳定的代码
7. 修改代码前要充分理解现有代码的工作原理
8. 每次修改都要经过充分的测试验证
9. 保持代码的一致性，不要引入不必要的复杂性
10. 记录所有重要的修改和原因，方便后续维护
11. 修改公共文件时需要特别谨慎：
    - 评估修改对其他模块的影响
    - 尽量避免修改公共文件，除非能提高整体系统稳定性
    - 修改前进行全面的依赖分析
    - 修改后进行全面的回归测试
    - 及时通知相关团队成员关注变更

调试建议：
1. 先观察问题现象
2. 定位问题根源
3. 采用最小修改方案
4. 验证修改效果
5. 确保不引入新问题

公共文件修改流程：
1. 分析修改必要性
   - 评估是否有其他解决方案
   - 确认修改能带来明显改进
2. 影响范围评估
   - 识别所有依赖该公共文件的模块
   - 评估每个模块可能受到的影响
3. 制定修改方案
   - 优先考虑向后兼容的方案
   - 必要时提供过渡方案
4. 测试验证
   - 单元测试覆盖
   - 集成测试验证
   - 全面的回归测试
5. 发布和监控
   - 分阶段发布
   - 密切监控系统表现
   - 准备回滚方案

// ... existing code ... 